'use client';
import { useState } from "react";
import { DayPicker } from "react-day-picker";
import "react-day-picker/dist/style.css";

const ChildrenForm = ({ selectedAnswers, handleAnswerChange, handleFieldChange }) => {
    const [childrenForms, setChildrenForms] = useState([1]);
    const [showCalendars, setShowCalendars] = useState({}); 

    const resetToMidnightUTC = (date) => {
        return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
    };

    const addChildForm = () => {
        setChildrenForms([...childrenForms, childrenForms.length + 1]);
    };

    const removeChildForm = (index) => {
        // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–±—ë–Ω–∫–µ –∏–∑ selectedAnswers
        const updatedAnswers = { ...selectedAnswers };
        childrenForms.forEach((childIndex, i) => {
            if (i + 1 >= index) {
                delete updatedAnswers[`[${childIndex}_–°HILDREN_LASTNAME]`];
                delete updatedAnswers[`[${childIndex}_–°HILDREN_NAME]`];
                delete updatedAnswers[`[${childIndex}_–°HILDREN_SURNAME]`];
                delete updatedAnswers[`[${childIndex}_–°HILDREN_BIRTHDATE]`];
            }
        });

        // –°–º–µ—â–∞–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–µ—Ç–µ–π
        const newChildrenForms = childrenForms
            .filter((childIndex) => childIndex !== index)
            .map((_, i) => i + 1);

        setChildrenForms(newChildrenForms);
        Object.keys(updatedAnswers).forEach((key) => {
            const match = key.match(/\[(\d+)_–°HILDREN_(.+?)\]/);
            if (match) {
                const oldIndex = parseInt(match[1]);
                const newKey = key.replace(`[${oldIndex}_`, `[${oldIndex - 1}_`);
                updatedAnswers[newKey] = updatedAnswers[key];
                delete updatedAnswers[key];
            }
        });

        handleAnswerChange(updatedAnswers);
    };

    return (
        <div className="w-full">
            {childrenForms.map((childIndex) => (
                <div key={childIndex} className="border p-4 rounded-xl mb-5 relative">
                    <h3 className="font-bold text-lg">–î–∏—Ç–∏–Ω–∞ {childIndex}</h3>

                    {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
                    <button
                        type="button"
                        onClick={() => removeChildForm(childIndex)}
                        className="absolute top-2 right-2 text-red-500"
                    >
                        üóë –í–∏–¥–∞–ª–∏—Ç–∏
                    </button>

                    {/* –ü–Ü–ë */}
                    <div className="flex flex-col gap-3">
                        <label className="text-l font-medium text-black">
                            <span style={{ color: 'red' }}>* </span>–üI–ë –î–∏—Ç–∏–Ω–∏
                        </label>
                        <input
                            value={selectedAnswers[`[${childIndex}_–°HILDREN_LASTNAME]`] || ''}
                            onChange={(e) => handleAnswerChange(`[${childIndex}_–°HILDREN_LASTNAME]`, e.target.value)}
                            type="text"
                            placeholder="–ü—Ä—ñ–∑–≤–∏—â–µ"
                            className="text-gray-900 border p-2 rounded-xl"
                        />
                        <input
                            value={selectedAnswers[`[${childIndex}_–°HILDREN_NAME]`] || ''}
                            onChange={(e) => handleAnswerChange(`[${childIndex}_–°HILDREN_NAME]`, e.target.value)}
                            type="text"
                            placeholder="–Ü–º'—è"
                            className="text-gray-900 border p-2 rounded-xl"
                        />
                        <input
                            value={selectedAnswers[`[${childIndex}_–°HILDREN_SURNAME]`] || ''}
                            onChange={(e) => handleAnswerChange(`[${childIndex}_–°HILDREN_SURNAME]`, e.target.value)}
                            type="text"
                            placeholder="–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ"
                            className="text-gray-900 border p-2 rounded-xl"
                        />
                    </div>

                    {/* –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è */}
                    <div className="w-full mt-5">
                        <div className="flex flex-col gap-3">
                            <label className="text-l font-medium text-black">
                                <span style={{ color: 'red' }}>* </span>–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–∏—Ç–∏–Ω–∏
                            </label>
                            <input
                                type="text"
                                readOnly
                                value={selectedAnswers[`[${childIndex}_–°HILDREN_BIRTHDATE]`] || ''}
                                onClick={() =>
                                    setShowCalendars({ ...showCalendars, [childIndex]: !showCalendars[childIndex] })
                                }
                                placeholder="–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"
                                className="w-full border p-2 rounded-xl text-gray-800 cursor-pointer"
                            />
                            {showCalendars[childIndex] && (
                                <div className="absolute z-10 bg-white border p-2 rounded-xl mt-2">
                                    <DayPicker
                                        mode="single"
                                        selected={
                                            selectedAnswers[`[${childIndex}_–°HILDREN_BIRTHDATE]`]
                                                ? new Date(selectedAnswers[`[${childIndex}_–°HILDREN_BIRTHDATE]`])
                                                : undefined
                                        }
                                        onSelect={(date) => {
                                            if (date) {
                                                const normalizedDate = resetToMidnightUTC(date);
                                                handleFieldChange(
                                                    `[${childIndex}_–°HILDREN_BIRTHDATE]`,
                                                    normalizedDate.toISOString().split("T")[0],
                                                    'none'
                                                );
                                                setShowCalendars({ ...showCalendars, [childIndex]: false });
                                            }
                                        }}
                                    />
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            ))}

            {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ */}
            <button
                type="button"
                onClick={addChildForm}
                className="mt-3 bg-blue-500 text-white px-4 py-2 rounded-xl"
            >
                + –î–æ–¥–∞—Ç–∏ —â–µ –æ–¥–Ω—É –¥–∏—Ç–∏–Ω—É
            </button>
        </div>
    );
};

export default ChildrenForm;
